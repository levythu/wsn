/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SerialMsg'
 * message type.
 */

public class SerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 98;

    /** Create a new SerialMsg of size 14. */
    public SerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SerialMsg of the given data_length. */
    public SerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg with the given data_length
     * and base offset.
     */
    public SerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store.
     */
    public SerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg embedded in the given message
     * at the given base offset.
     */
    public SerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public SerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SerialMsg> \n";
      try {
        s += "  [msgType=0x"+Long.toHexString(get_msgType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msgNum=0x"+Long.toHexString(get_msgNum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msgTime=0x"+Long.toHexString(get_msgTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temp=0x"+Long.toHexString(get_temp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humid=0x"+Long.toHexString(get_humid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [light=0x"+Long.toHexString(get_light())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgType
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgType' is signed (false).
     */
    public static boolean isSigned_msgType() {
        return false;
    }

    /**
     * Return whether the field 'msgType' is an array (false).
     */
    public static boolean isArray_msgType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgType'
     */
    public static int offset_msgType() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgType'
     */
    public static int offsetBits_msgType() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'msgType'
     */
    public int get_msgType() {
        return (int)getUIntBEElement(offsetBits_msgType(), 16);
    }

    /**
     * Set the value of the field 'msgType'
     */
    public void set_msgType(int value) {
        setUIntBEElement(offsetBits_msgType(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgType'
     */
    public static int size_msgType() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgType'
     */
    public static int sizeBits_msgType() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgNum
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgNum' is signed (false).
     */
    public static boolean isSigned_msgNum() {
        return false;
    }

    /**
     * Return whether the field 'msgNum' is an array (false).
     */
    public static boolean isArray_msgNum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgNum'
     */
    public static int offset_msgNum() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgNum'
     */
    public static int offsetBits_msgNum() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'msgNum'
     */
    public int get_msgNum() {
        return (int)getUIntBEElement(offsetBits_msgNum(), 16);
    }

    /**
     * Set the value of the field 'msgNum'
     */
    public void set_msgNum(int value) {
        setUIntBEElement(offsetBits_msgNum(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgNum'
     */
    public static int size_msgNum() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgNum'
     */
    public static int sizeBits_msgNum() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgTime
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgTime' is signed (false).
     */
    public static boolean isSigned_msgTime() {
        return false;
    }

    /**
     * Return whether the field 'msgTime' is an array (false).
     */
    public static boolean isArray_msgTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgTime'
     */
    public static int offset_msgTime() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgTime'
     */
    public static int offsetBits_msgTime() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'msgTime'
     */
    public long get_msgTime() {
        return (long)getUIntBEElement(offsetBits_msgTime(), 32);
    }

    /**
     * Set the value of the field 'msgTime'
     */
    public void set_msgTime(long value) {
        setUIntBEElement(offsetBits_msgTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgTime'
     */
    public static int size_msgTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgTime'
     */
    public static int sizeBits_msgTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temp
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temp' is signed (false).
     */
    public static boolean isSigned_temp() {
        return false;
    }

    /**
     * Return whether the field 'temp' is an array (false).
     */
    public static boolean isArray_temp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temp'
     */
    public static int offset_temp() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temp'
     */
    public static int offsetBits_temp() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'temp'
     */
    public int get_temp() {
        return (int)getUIntBEElement(offsetBits_temp(), 16);
    }

    /**
     * Set the value of the field 'temp'
     */
    public void set_temp(int value) {
        setUIntBEElement(offsetBits_temp(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temp'
     */
    public static int size_temp() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temp'
     */
    public static int sizeBits_temp() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humid
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humid' is signed (false).
     */
    public static boolean isSigned_humid() {
        return false;
    }

    /**
     * Return whether the field 'humid' is an array (false).
     */
    public static boolean isArray_humid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'humid'
     */
    public static int offset_humid() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humid'
     */
    public static int offsetBits_humid() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'humid'
     */
    public int get_humid() {
        return (int)getUIntBEElement(offsetBits_humid(), 16);
    }

    /**
     * Set the value of the field 'humid'
     */
    public void set_humid(int value) {
        setUIntBEElement(offsetBits_humid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'humid'
     */
    public static int size_humid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'humid'
     */
    public static int sizeBits_humid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: light
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'light' is signed (false).
     */
    public static boolean isSigned_light() {
        return false;
    }

    /**
     * Return whether the field 'light' is an array (false).
     */
    public static boolean isArray_light() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'light'
     */
    public static int offset_light() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'light'
     */
    public static int offsetBits_light() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'light'
     */
    public int get_light() {
        return (int)getUIntBEElement(offsetBits_light(), 16);
    }

    /**
     * Set the value of the field 'light'
     */
    public void set_light(int value) {
        setUIntBEElement(offsetBits_light(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'light'
     */
    public static int size_light() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'light'
     */
    public static int sizeBits_light() {
        return 16;
    }

}
